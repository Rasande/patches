@use '../abstracts/variables'as *;

// Media queries.
@mixin mq($breakpoint) {

    @if map-has-key($breakpoints, $breakpoint) {
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        @media only screen and (min-width: $breakpoint-value) {
            @content;
        }
    }

    @else {
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

// Fluid type
@mixin fluid-type($min-fs-value, $max-fs-value, $min-range, $max-range) {

    $min-range-value: map-get($breakpoints, $min-range);
    $max-range-value: map-get($breakpoints, $max-range);

    font-size: calc(#{$min-fs-value} + #{(($max-fs-value / ($max-fs-value * 0 + 1)) - ($min-fs-value / ($min-fs-value * 0 + 1)))} * ((100vw - #{$min-range-value}) / #{(($max-range-value / ($max-range-value * 0 + 1)) - ($min-range-value / ($min-range-value * 0 + 1)))}));

    @media screen and (max-width: $min-range-value) {
        font-size: $min-fs-value;
    }

    @media screen and (min-width: $max-range-value) {
        font-size: $max-fs-value;
    }
}

// Font size and line-height from map
@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
    @each $fs-breakpoint, $fs-font-size in $fs-map {
        @if $fs-breakpoint==null {
            @include make-font-size($fs-font-size);
        }

        @else {
            @if map-has-key($fs-breakpoints, $fs-breakpoint) {
                $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
            }

            @media screen and (min-width: $fs-breakpoint) {
                @include make-font-size($fs-font-size);
            }
        }
    }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {

    @if type-of($fs-font-size)=="list" {
        font-size: nth($fs-font-size, 1);

        @if (length($fs-font-size) > 1) {
            line-height: nth($fs-font-size, 2);
        }
    }

    @else {
        font-size: $fs-font-size;
    }
}
